package com.github.lespaul361.commons.simplespreadsheet.opendocspreadsheet.attributes;

public interface FOMargin {
	/**
	 * The possible location of the margin
	 * 
	 * @author David Hamilton
	 *
	 */
	enum MarginLocations {
		/**
		 * Use for all margins
		 */
		MARGIN,
		/**
		 * The left margin
		 */
		MARGIN_LEFT,
		/**
		 * The right margin
		 */
		MARGIN_RIGHT,
		/**
		 * The top margin
		 */
		MARGIN_TOP,
		/**
		 * The bottom margin
		 */
		MARGIN_BOTTOM;

		/**
		 * The hashcode for this enum generated by the name selected
		 * 
		 * @return a long with the hashcode
		 */
		public long hashcode() {
			byte[] buffer = toString().getBytes();
			long ret = 0;
			int magNum = 12;
			for (byte b : buffer) {
				ret += b * magNum;
			}
			return ret;
		}

		/**
		 * Gets the name in attribute form
		 */
		public String toString() {
			String s = this.name();
			s = s.toLowerCase();
			s = s.replace("_", "-");
			return s;
		}

		/**
		 * Gets the FO tag name
		 * 
		 * @return the FO tag name
		 */
		public String toFOString() {
			return "fo:" + this.toString();
		}

		/**
		 * Checks if this is equal to the provided
		 * 
		 * @param location
		 *            the location to check against
		 * @return true if they are equal and false if they are not.
		 */
		public boolean equals(MarginLocations location) {
			if (location.hashcode() != location.hashcode()) {
				return false;
			}
			return true;
		}
	}

	/**
	 * Sets the margin
	 * 
	 * @param location
	 *            the location of the margin
	 * @param size
	 *            the size of the margin as a percent
	 */
	void setMargin(MarginLocations location, Float size);

	/**
	 * Sets the margin
	 * 
	 * @param location
	 *            the location of the margin
	 * @param size
	 *            the size of the margin in pixels
	 */
	void setMargin(MarginLocations location, Integer size);

	/**
	 * Gets the location of the margin
	 * 
	 * @return the location of the margin
	 */
	MarginLocations getLocation();

	/**
	 * Gets the size of the margin
	 * 
	 * @return the size of the margin
	 */
	Float getSize();

	/**
	 * Gets if the margin size is a percentage
	 * 
	 * @return true if it is a percentage and false if it is in pixels
	 */
	boolean isMarginPercentage();
}
